{"ast":null,"code":"var _jsxFileName = \"/home/oem/Desktop/cryptotracker/src/PriceCoins.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CoinsPriceContext = /*#__PURE__*/createContext({});\nexport function CoinsPriceProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [btcPrice, setBtcPrice] = useState(0);\n  const [btcPreviousPrice, setBtcPreviousPrice] = useState(0);\n  const [ethPrice, setEthPrice] = useState(0);\n  const [ethPreviousPrice, setEthPreviousPrice] = useState(0);\n  const [bnbPrice, setBnbPrice] = useState(0);\n  const [bnbPreviousPrice, setBnbPreviousPrice] = useState(0);\n  const [xrpPrice, setXrpPrice] = useState(0);\n  const [xrpPreviousPrice, setXrpPreviousPrice] = useState(0);\n  const [adaPrice, setAdaPrice] = useState(0);\n  const [adaPreviousPrice, setAdaPreviousPrice] = useState(0);\n  const [ltcPrice, setLtcPrice] = useState(0);\n  const [ltcPreviousPrLce, setLtcPreviousPrice] = useState(0);\n  useEffect(() => {\n    const intervalId = setInterval(async () => {\n      const btcResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT');\n      const btcData = await btcResponse.json();\n      const btcNewPrice = parseFloat(btcData.price).toFixed(2);\n      const btcPriceString = btcNewPrice.toString();\n      const btcFormattedPrice = btcPriceString.length > 6 ? btcPriceString.slice(0, btcPriceString.length - 6) + \",\" + btcPriceString.slice(btcPriceString.length - 6) : btcPriceString;\n      setBtcPreviousPrice(btcPrice);\n      setBtcPrice(btcFormattedPrice);\n      const ethResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT');\n      const ethData = await ethResponse.json();\n      const ethNewPrice = parseFloat(ethData.price).toFixed(2);\n      const ethPriceString = ethNewPrice.toString();\n      const ethFormattedPrice = ethPriceString.length > 6 ? ethPriceString.slice(0, ethPriceString.length - 6) + \",\" + ethPriceString.slice(ethPriceString.length - 6) : ethPriceString;\n      setEthPreviousPrice(ethPrice);\n      setEthPrice(ethFormattedPrice);\n      const bnbResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT');\n      const bnbData = await bnbResponse.json();\n      const bnbNewPrice = parseFloat(bnbData.price).toFixed(2);\n      ;\n      setBnbPreviousPrice(bnbPrice);\n      setBnbPrice(bnbNewPrice);\n      const xrpResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=XRPUSDT');\n      const xrpData = await xrpResponse.json();\n      const xrpNewPrice = parseFloat(xrpData.price).toFixed(2);\n      setXrpPreviousPrice(xrpPrice);\n      setXrpPrice(xrpNewPrice);\n      const adaResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=ADAUSDT');\n      const adaData = await adaResponse.json();\n      const adaNewPrice = parseFloat(adaData.price).toFixed(2);\n      setAdaPreviousPrice(adaPrice);\n      setAdaPrice(adaNewPrice);\n      const ltcResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=LTCUSDT');\n      const ltcData = await ltcResponse.json();\n      const ltcNewPrice = parseFloat(ltcData.price).toFixed(2);\n      setLtcPreviousPrice(ltcPrice);\n      setLtcPrice(ltcNewPrice);\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(CoinsPriceContext.Provider, {\n    value: {\n      btcPrice,\n      ethPrice,\n      bnbPrice,\n      xrpPrice,\n      adaPrice,\n      ltcPrice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(CoinsPriceProvider, \"bxZ1vkT7U7fKLbDtnz/kUAqzs+A=\");\n_c = CoinsPriceProvider;\nvar _c;\n$RefreshReg$(_c, \"CoinsPriceProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","CoinsPriceContext","CoinsPriceProvider","children","btcPrice","setBtcPrice","btcPreviousPrice","setBtcPreviousPrice","ethPrice","setEthPrice","ethPreviousPrice","setEthPreviousPrice","bnbPrice","setBnbPrice","bnbPreviousPrice","setBnbPreviousPrice","xrpPrice","setXrpPrice","xrpPreviousPrice","setXrpPreviousPrice","adaPrice","setAdaPrice","adaPreviousPrice","setAdaPreviousPrice","ltcPrice","setLtcPrice","ltcPreviousPrLce","setLtcPreviousPrice","intervalId","setInterval","btcResponse","fetch","btcData","json","btcNewPrice","parseFloat","price","toFixed","btcPriceString","toString","btcFormattedPrice","length","slice","ethResponse","ethData","ethNewPrice","ethPriceString","ethFormattedPrice","bnbResponse","bnbData","bnbNewPrice","xrpResponse","xrpData","xrpNewPrice","adaResponse","adaData","adaNewPrice","ltcResponse","ltcData","ltcNewPrice","clearInterval"],"sources":["/home/oem/Desktop/cryptotracker/src/PriceCoins.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\nexport const CoinsPriceContext = createContext({});\n\nexport function CoinsPriceProvider({ children }) {\n  const [btcPrice, setBtcPrice] = useState(0);\n  const [btcPreviousPrice, setBtcPreviousPrice] = useState(0);\n  const [ethPrice, setEthPrice] = useState(0);\n  const [ethPreviousPrice, setEthPreviousPrice] = useState(0);\n  const [bnbPrice, setBnbPrice] = useState(0);\n  const [bnbPreviousPrice, setBnbPreviousPrice] = useState(0);\n  const [xrpPrice, setXrpPrice] = useState(0);\n  const [xrpPreviousPrice, setXrpPreviousPrice] = useState(0);\n  const [adaPrice, setAdaPrice] = useState(0);\n  const [adaPreviousPrice, setAdaPreviousPrice] = useState(0);\n  const [ltcPrice, setLtcPrice] = useState(0);\n  const [ltcPreviousPrLce, setLtcPreviousPrice] = useState(0);\n\n  useEffect(() => {\n    const intervalId = setInterval(async () => {\n      const btcResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT'\n      );\n      const btcData = await btcResponse.json();\n      const btcNewPrice = parseFloat(btcData.price).toFixed(2);\n      const btcPriceString = btcNewPrice.toString();\n      const btcFormattedPrice = btcPriceString.length > 6 ? btcPriceString.slice(0, btcPriceString.length - 6) + \",\" + btcPriceString.slice(btcPriceString.length - 6) : btcPriceString;\n      setBtcPreviousPrice(btcPrice);\n      setBtcPrice(btcFormattedPrice);\n\n      const ethResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT'\n      );\n      const ethData = await ethResponse.json();\n      const ethNewPrice = parseFloat(ethData.price).toFixed(2);\n      const ethPriceString = ethNewPrice.toString();\n      const ethFormattedPrice = ethPriceString.length > 6 ? ethPriceString.slice(0, ethPriceString.length - 6) + \",\" + ethPriceString.slice(ethPriceString.length - 6) : ethPriceString;\n      setEthPreviousPrice(ethPrice);\n      setEthPrice(ethFormattedPrice);\n\n      const bnbResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT'\n      );\n      const bnbData = await bnbResponse.json();\n      const bnbNewPrice = parseFloat(bnbData.price).toFixed(2);;\n      setBnbPreviousPrice(bnbPrice);\n      setBnbPrice(bnbNewPrice);\n      const xrpResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=XRPUSDT'\n      );\n      const xrpData = await xrpResponse.json();\n      const xrpNewPrice = parseFloat(xrpData.price).toFixed(2);\n      setXrpPreviousPrice(xrpPrice);\n      setXrpPrice(xrpNewPrice);\n\n      const adaResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=ADAUSDT'\n      );\n      const adaData = await adaResponse.json();\n      const adaNewPrice = parseFloat(adaData.price).toFixed(2);\n      setAdaPreviousPrice(adaPrice);\n      setAdaPrice(adaNewPrice);\n      const ltcResponse = await fetch(\n        'https://api.binance.com/api/v3/ticker/price?symbol=LTCUSDT'\n      );\n      const ltcData = await ltcResponse.json();\n      const ltcNewPrice = parseFloat(ltcData.price).toFixed(2);\n      setLtcPreviousPrice(ltcPrice);\n      setLtcPrice(ltcNewPrice);\n    }, 5000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n\n  return (\n    <CoinsPriceContext.Provider\n      value={{\n        btcPrice,\n        ethPrice,\n        bnbPrice,\n        xrpPrice,\n        adaPrice,\n        ltcPrice\n      }}\n    >\n      {children}\n    </CoinsPriceContext.Provider>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}