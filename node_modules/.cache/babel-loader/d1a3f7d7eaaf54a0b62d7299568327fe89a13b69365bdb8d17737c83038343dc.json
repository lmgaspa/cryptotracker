{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nexport default function Track() {\n  _s();\n  const [btcPrice, setBtcPrice] = useState(0);\n  const [btcPreviousPrice, setBtcPreviousPrice] = useState(0);\n  const [ethPrice, setEthPrice] = useState(0);\n  const [ethPreviousPrice, setEthPreviousPrice] = useState(0);\n  const [bnbPrice, setBnbPrice] = useState(0);\n  const [bnbPreviousPrice, setBnbPreviousPrice] = useState(0);\n  const [xrpPrice, setXrpPrice] = useState(0);\n  const [xrpPreviousPrice, setXrpPreviousPrice] = useState(0);\n  const [adaPrice, setAdaPrice] = useState(0);\n  const [adaPreviousPrice, setAdaPreviousPrice] = useState(0);\n  useEffect(() => {\n    const intervalId = setInterval(async () => {\n      const btcResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT');\n      const btcData = await btcResponse.json();\n      const btcNewPrice = parseFloat(btcData.price).toFixed(2);\n      const btcPriceString = btcNewPrice.toString();\n      const btcFormattedPrice = btcPriceString.length > 6 ? btcPriceString.slice(0, btcPriceString.length - 6) + \",\" + btcPriceString.slice(btcPriceString.length - 6) : btcPriceString;\n      setBtcPreviousPrice(btcPrice);\n      setBtcPrice(btcFormattedPrice);\n      const ethResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT');\n      const ethData = await ethResponse.json();\n      const ethNewPrice = parseFloat(ethData.price).toFixed(2);\n      const ethPriceString = ethNewPrice.toString();\n      const ethFormattedPrice = ethPriceString.length > 6 ? ethPriceString.slice(0, ethPriceString.length - 6) + \",\" + ethPriceString.slice(ethPriceString.length - 6) : ethPriceString;\n      setEthPreviousPrice(ethPrice);\n      setEthPrice(ethFormattedPrice);\n      const bnbResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT');\n      const bnbData = await bnbResponse.json();\n      const bnbNewPrice = parseFloat(bnbData.price).toFixed(2);\n      ;\n      setBnbPreviousPrice(bnbPrice);\n      setBnbPrice(bnbNewPrice);\n      const xrpResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=XRPUSDT');\n      const xrpData = await xrpResponse.json();\n      const xrpNewPrice = parseFloat(xrpData.price).toFixed(2);\n      setXrpPreviousPrice(xrpPrice);\n      setXrpPrice(xrpNewPrice);\n      const adaResponse = await fetch('https://api.binance.com/api/v3/ticker/price?symbol=ADAUSDT');\n      const adaData = await adaResponse.json();\n      const adaNewPrice = parseFloat(adaData.price).toFixed(2);\n      setAdaPreviousPrice(adaPrice);\n      setAdaPrice(adaNewPrice);\n    }, 5000);\n    return () => clearInterval(intervalId);\n  }, []);\n}\n_s(Track, \"Z8QSPh+6kqg+HGy96z2/gad8lS8=\");\n_c = Track;\nvar _c;\n$RefreshReg$(_c, \"Track\");","map":{"version":3,"names":["React","useEffect","useState","Track","btcPrice","setBtcPrice","btcPreviousPrice","setBtcPreviousPrice","ethPrice","setEthPrice","ethPreviousPrice","setEthPreviousPrice","bnbPrice","setBnbPrice","bnbPreviousPrice","setBnbPreviousPrice","xrpPrice","setXrpPrice","xrpPreviousPrice","setXrpPreviousPrice","adaPrice","setAdaPrice","adaPreviousPrice","setAdaPreviousPrice","intervalId","setInterval","btcResponse","fetch","btcData","json","btcNewPrice","parseFloat","price","toFixed","btcPriceString","toString","btcFormattedPrice","length","slice","ethResponse","ethData","ethNewPrice","ethPriceString","ethFormattedPrice","bnbResponse","bnbData","bnbNewPrice","xrpResponse","xrpData","xrpNewPrice","adaResponse","adaData","adaNewPrice","clearInterval"],"sources":["/home/oem/Desktop/cryptotracker/src/track.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nexport default function Track() {\n    const [btcPrice, setBtcPrice] = useState(0);\n    const [btcPreviousPrice, setBtcPreviousPrice] = useState(0);\n    const [ethPrice, setEthPrice] = useState(0);\n    const [ethPreviousPrice, setEthPreviousPrice] = useState(0);\n    const [bnbPrice, setBnbPrice] = useState(0);\n    const [bnbPreviousPrice, setBnbPreviousPrice] = useState(0);\n    const [xrpPrice, setXrpPrice] = useState(0);\n    const [xrpPreviousPrice, setXrpPreviousPrice] = useState(0);\n    const [adaPrice, setAdaPrice] = useState(0);\n    const [adaPreviousPrice, setAdaPreviousPrice] = useState(0);\n  \n    useEffect(() => {\n      const intervalId = setInterval(async () => {\n        const btcResponse = await fetch(\n          'https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT'\n        );\n        const btcData = await btcResponse.json();\n        const btcNewPrice = parseFloat(btcData.price).toFixed(2);\n        const btcPriceString = btcNewPrice.toString();\n        const btcFormattedPrice = btcPriceString.length > 6 ? btcPriceString.slice(0, btcPriceString.length - 6) + \",\" + btcPriceString.slice(btcPriceString.length - 6) : btcPriceString;\n        setBtcPreviousPrice(btcPrice);\n        setBtcPrice(btcFormattedPrice);\n  \n        const ethResponse = await fetch(\n          'https://api.binance.com/api/v3/ticker/price?symbol=ETHUSDT'\n        );\n        const ethData = await ethResponse.json();\n        const ethNewPrice = parseFloat(ethData.price).toFixed(2);\n        const ethPriceString = ethNewPrice.toString();\n        const ethFormattedPrice = ethPriceString.length > 6 ? ethPriceString.slice(0, ethPriceString.length - 6) + \",\" + ethPriceString.slice(ethPriceString.length - 6) : ethPriceString;\n        setEthPreviousPrice(ethPrice);\n        setEthPrice(ethFormattedPrice);\n  \n        const bnbResponse = await fetch(\n          'https://api.binance.com/api/v3/ticker/price?symbol=BNBUSDT'\n        );\n        const bnbData = await bnbResponse.json();\n        const bnbNewPrice = parseFloat(bnbData.price).toFixed(2);;\n        setBnbPreviousPrice(bnbPrice);\n        setBnbPrice(bnbNewPrice);\n        const xrpResponse = await fetch(\n          'https://api.binance.com/api/v3/ticker/price?symbol=XRPUSDT'\n        );\n        const xrpData = await xrpResponse.json();\n        const xrpNewPrice = parseFloat(xrpData.price).toFixed(2);\n        setXrpPreviousPrice(xrpPrice);\n        setXrpPrice(xrpNewPrice);\n  \n        const adaResponse = await fetch(\n          'https://api.binance.com/api/v3/ticker/price?symbol=ADAUSDT'\n        );\n        const adaData = await adaResponse.json();\n        const adaNewPrice = parseFloat(adaData.price).toFixed(2);\n        setAdaPreviousPrice(adaPrice);\n        setAdaPrice(adaNewPrice);\n      }, 5000);\n  \n      return () => clearInterval(intervalId);\n    }, []);}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}